// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract DegenToken is ERC20 {
    address public admin;
    
    constructor() ERC20("DegenToken", "DEGEN") {
        _mint(msg.sender, 1000000 * 10 ** uint(decimals())); // Initial supply: 1,000,000 DEGEN
        admin = msg.sender;
    }

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }

    function mint(address to, uint256 amount) external onlyAdmin {
        _mint(to, amount);
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
    }

    function deliverItems(address player, uint256 itemId, uint256 quantity) external onlyAdmin {
        // Here you would implement the logic to deliver items to the player
        // For simplicity, let's assume this just emits an event
        emit ItemsDelivered(player, itemId, quantity);
    }

    function transfer(address to, uint256 amount) public override returns (bool) {
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount <= balanceOf(msg.sender), "ERC20: transfer amount exceeds balance");
        
        _transfer(msg.sender, to, amount);
        return true;
    }

    event ItemsDelivered(address indexed player, uint256 indexed itemId, uint256 quantity);
}
